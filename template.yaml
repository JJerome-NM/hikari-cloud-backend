AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  python3.12
  Sample SAM Template for Hikari-Cloud

Globals:
  Function:
    Timeout: 3

Parameters:
  S3BucketName:
    Type: String
    Description: Bucket name
    Default: "hikari-cloud-storage"
  DynamoDBItemsTableName:
    Type: String
    Description: Bucket name
    Default: cloud_item_table
  DynamoDBSharedTableName:
    Type: String
    Description: Bucket name
    Default: cloud_shared_table
  JWTSecret:
    Type: String
    Description: Secret key for JWT
    Default: local-secret-key
  HikariCloudFrontend:
    Type: String
    Description: Frontend url
    Default: http://localhost:5173
  HikariCloudFrontendCallbacks:
    Type: String
    Description: Frontend callback url
    Default: http://localhost:5173/hikari-cloud-frontend

Resources:
  HikariCloudCognitoPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: HikariCloudCognitoPool
      AutoVerifiedAttributes:
        - email
#      Schema:
#        - Name: email
#          AttributeDataType: String
#          Mutable: false
#          Required: true
#        - Name: name
#          AttributeDataType: String
#          Mutable: true
#          Required: true

  HikariCloudCognitoPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref HikariCloudCognitoPool
      ClientName: HikariCloudCognitoPoolClient
      GenerateSecret: false
      AllowedOAuthFlowsUserPoolClient: True
      CallbackURLs:
        - !Ref HikariCloudFrontendCallbacks
      LogoutURLs:
        - !Ref HikariCloudFrontendCallbacks
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
      SupportedIdentityProviders:
        - COGNITO

  HikariCloudCognitoPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref HikariCloudCognitoPool
      Domain: "hikari-cloud-auth"

  HikariCloudApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      BinaryMediaTypes:
        - "multipart/form-data"
        - "image/png"
        - "image/jpeg"
        - "image/jpg"
        - "image/gif"
        - "image/webp"
        - "application/octet-stream"
      EndpointConfiguration:
        Type: REGIONAL
      Auth:
        ResourcePolicy:
          CustomStatements:
            - Effect: "Allow"
              Principal: "*"
              Action: "execute-api:Invoke"
              Resource: "execute-api:/Prod/*/*"
            - Effect: "Allow"
              Principal: "*"
              Action: "execute-api:Invoke"
              Resource: "execute-api:/Prod/OPTIONS/*"

        DefaultAuthorizer: HikariCloudCognitoAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          HikariCloudCognitoAuthorizer:
            UserPoolArn: !GetAtt HikariCloudCognitoPool.Arn

      Cors:
        AllowMethods: "'POST,GET,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: !Sub "'${HikariCloudFrontend}'"
        MaxAge: "'600'"
        AllowCredentials: true

  HikariCloudItemTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DynamoDBItemsTableName
      AttributeDefinitions:
        - AttributeName: itemId
          AttributeType: S
        - AttributeName: ownerId
          AttributeType: S
        - AttributeName: parentId
          AttributeType: S
      KeySchema:
        - AttributeName: itemId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: ownerId-index
          KeySchema:
            - AttributeName: ownerId
              KeyType: HASH
            - AttributeName: parentId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        - IndexName: parentId-index
          KeySchema:
            - AttributeName: parentId
              KeyType: HASH
            - AttributeName: ownerId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  HikariCloudSharedTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DynamoDBSharedTableName
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: itemId
          AttributeType: S
        - AttributeName: parentId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: itemId
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: userId-index
          KeySchema:
            - AttributeName: itemId
              KeyType: HASH
            - AttributeName: userId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        - IndexName: parentId-index
          KeySchema:
            - AttributeName: parentId
              KeyType: HASH
            - AttributeName: userId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  HikariCloudS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName

  #   Folder Functions

  CreateFolderFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBItemsTableName
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBSharedTableName
      Environment:
        Variables:
          JWT_SECRET: !Ref JWTSecret
          HIKARI_CLOUD_FRONTEND: !Ref HikariCloudFrontend
      Events:
        CreateFolder:
          Type: Api
          Properties:
            Path: /folder
            Method: POST
            RestApiId: !Ref HikariCloudApi

    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./endpoints/folder/createFolder
      DockerTag: python3.12-v1

  DeleteFolderFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBItemsTableName
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBSharedTableName
      Environment:
        Variables:
          JWT_SECRET: !Ref JWTSecret
          HIKARI_CLOUD_FRONTEND: !Ref HikariCloudFrontend
          HIKARI_CLOUD_S3BUCKET: !Ref HikariCloudS3Bucket
      Events:
        DeleteFolder:
          Type: Api
          Properties:
            Path: /folder/{id}
            Method: DELETE
            RestApiId: !Ref HikariCloudApi
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./endpoints/item/delete
      DockerTag: python3.12-v1

  GetFolderFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBItemsTableName
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBSharedTableName
      Environment:
        Variables:
          JWT_SECRET: !Ref JWTSecret
          HIKARI_CLOUD_FRONTEND: !Ref HikariCloudFrontend
      Events:
        GetFolder:
          Type: Api
          Properties:
            Path: /folder/{id}
            Method: GET
            RestApiId: !Ref HikariCloudApi
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./endpoints/item/get
      DockerTag: python3.12-v1

  GetRootFolderFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBItemsTableName
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBSharedTableName
      Environment:
        Variables:
          JWT_SECRET: !Ref JWTSecret
          HIKARI_CLOUD_FRONTEND: !Ref HikariCloudFrontend
      Events:
        GetFolder:
          Type: Api
          Properties:
            Path: /folder
            Method: GET
            RestApiId: !Ref HikariCloudApi
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./endpoints/folder/getRootFolder
      DockerTag: python3.12-v1

  UploadPhotoToFolderFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBItemsTableName
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBSharedTableName
        - S3CrudPolicy:
            BucketName: !Ref S3BucketName
      Environment:
        Variables:
          JWT_SECRET: !Ref JWTSecret
          HIKARI_CLOUD_FRONTEND: !Ref HikariCloudFrontend
          HIKARI_CLOUD_S3BUCKET: !Ref HikariCloudS3Bucket
      Events:
        UploadPhotoToFolder:
          Type: Api
          Properties:
            Path: /folder/{id}/upload
            Method: POST
            RestApiId: !Ref HikariCloudApi
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./endpoints/folder/uploadPhotoToFolder
      DockerTag: python3.12-v1

  #   Photo Functions

  DeletePhotoFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBItemsTableName
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBSharedTableName
        - S3CrudPolicy:
            BucketName: !Ref S3BucketName
      Environment:
        Variables:
          JWT_SECRET: !Ref JWTSecret
          HIKARI_CLOUD_FRONTEND: !Ref HikariCloudFrontend
          HIKARI_CLOUD_S3BUCKET: !Ref HikariCloudS3Bucket
      Events:
        UploadPhotoToFolder:
          Type: Api
          Properties:
            Path: /photo/{id}
            Method: DELETE
            RestApiId: !Ref HikariCloudApi
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./endpoints/item/delete
      DockerTag: python3.12-v1

  GetPhotoFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBItemsTableName
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBSharedTableName
        - S3CrudPolicy:
            BucketName: !Ref S3BucketName
      Environment:
        Variables:
          JWT_SECRET: !Ref JWTSecret
          HIKARI_CLOUD_FRONTEND: !Ref HikariCloudFrontend
          HIKARI_CLOUD_S3BUCKET: !Ref HikariCloudS3Bucket
      Events:
        UploadPhotoToFolder:
          Type: Api
          Properties:
            Path: /photo/{id}
            Method: GET
            RestApiId: !Ref HikariCloudApi
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./endpoints/photo/get
      DockerTag: python3.12-v1

  #   Share Function

  UseShareTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBItemsTableName
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBSharedTableName
      Environment:
        Variables:
          JWT_SECRET: !Ref JWTSecret
          HIKARI_CLOUD_FRONTEND: !Ref HikariCloudFrontend
      Events:
        UploadPhotoToFolder:
          Type: Api
          Properties:
            Path: /share/use-token
            Method: POST
            RestApiId: !Ref HikariCloudApi
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./endpoints/share/useShareToken
      DockerTag: python3.12-v1

  GetSharedItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBItemsTableName
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBSharedTableName
      Environment:
        Variables:
          JWT_SECRET: !Ref JWTSecret
          HIKARI_CLOUD_FRONTEND: !Ref HikariCloudFrontend
      Events:
        UploadPhotoToFolder:
          Type: Api
          Properties:
            Path: /share
            Method: GET
            RestApiId: !Ref HikariCloudApi
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./endpoints/share/getSharedItems
      DockerTag: python3.12-v1

Outputs:
  HikariCloudApiExport:
    Description: "Api Gateway Arn"
    Value: !Ref HikariCloudApi
    Export:
      Name: ImageUploadFunctionArnExport
