AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  python3.12

  Sample SAM Template for Hikari-Cloud

Globals:
  Function:
    Timeout: 3

Resources:
  HikariCloudCognitoPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: HikariCloudCognitoPool
      AutoVerifiedAttributes:
        - email

  HikariCloudCognitoPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref HikariCloudCognitoPool
      ClientName: HikariCloudCognitoPoolClient
      GenerateSecret: false

  HikariCloudApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      BinaryMediaTypes:
        - '*/*'
      EndpointConfiguration:
        Type: REGIONAL
      Auth:
        DefaultAuthorizer: HikariCloudCognitoAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          HikariCloudCognitoAuthorizer:
            UserPoolArn: !GetAtt HikariCloudCognitoPool.Arn
      Models:
        FolderCreate: # TODO Add validation
          type: object
          required:
            - folderName
          properties:
            folderName:
              type: string
            parentFolderId:
              type: string
              pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'

  CloudItemTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: cloud_item_table
      AttributeDefinitions:
        - AttributeName: itemId
          AttributeType: S
        - AttributeName: ownerId
          AttributeType: S
        - AttributeName: parentId
          AttributeType: S
      KeySchema:
        - AttributeName: itemId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: ownerId-index
          KeySchema:
            - AttributeName: ownerId
              KeyType: HASH
            - AttributeName: parentId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  CloudSharedTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: cloud_shared_table
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: itemId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: itemId
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: userId-index
          KeySchema:
            - AttributeName: itemId
              KeyType: HASH
            - AttributeName: userId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1


  #   Folder Functions

  CreateFolderFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: folder_table
      Events:
        CreateFolder:
          Type: Api
          Properties:
            Path: /folder
            Method: POST
            RestApiId: !Ref HikariCloudApi
            RequestModel:
              Model: FolderCreate
              Required: true
              ValidateBody: true

    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./endpoints/folder/createFolder
      DockerTag: python3.12-v1

  DeleteFolderFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: folder_table
      Events:
        DeleteFolder:
          Type: Api
          Properties:
            Path: /folder/{id}
            Method: DELETE
            RestApiId: !Ref HikariCloudApi
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./endpoints/item/delete
      DockerTag: python3.12-v1

  GetFolderFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: folder_table
      Events:
        GetFolder:
          Type: Api
          Properties:
            Path: /folder/{id}
            Method: GET
            RestApiId: !Ref HikariCloudApi
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./endpoints/folder/getFolder
      DockerTag: python3.12-v1

  UploadPhotoToFolderFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: folder_table
      Events:
        UploadPhotoToFolder:
          Type: Api
          Properties:
            Path: /folder/{id}/upload
            Method: POST
            RestApiId: !Ref HikariCloudApi
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./endpoints/folder/uploadPhotoToFolder
      DockerTag: python3.12-v1

  #   Photo Functions

  DeletePhotoFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: photo_table
      Events:
        UploadPhotoToFolder:
          Type: Api
          Properties:
            Path: /photo/{id}
            Method: DELETE
            RestApiId: !Ref HikariCloudApi
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./endpoints/photo/deletePhoto
      DockerTag: python3.12-v1

  GetPhotoFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: photo_table
      Events:
        UploadPhotoToFolder:
          Type: Api
          Properties:
            Path: /photo/{id}
            Method: GET
            RestApiId: !Ref HikariCloudApi
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./endpoints/photo/getPhoto
      DockerTag: python3.12-v1

  #   Share Function

  EditShareFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: sharing_table
      Events:
        UploadPhotoToFolder:
          Type: Api
          Properties:
            Path: /share/{id}
            Method: GET
            RestApiId: !Ref HikariCloudApi
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./endpoints/share/editShare
      DockerTag: python3.12-v1

Outputs:
  HikariCloudApiExport:
    Description: "Api Gateway Arn"
    Value: !Ref HikariCloudApi
    Export:
      Name: ImageUploadFunctionArnExport
